=begin
#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class BrandsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Creates a new brand in the store.
    # @param brand Brand to add to the store
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def add_brands(brand, opts = {})
      data, _status_code, _headers = add_brands_with_http_info(brand, opts)
      return data
    end

    # 
    # Creates a new brand in the store.
    # @param brand Brand to add to the store
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def add_brands_with_http_info(brand, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.add_brands ..."
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling BrandsApi.add_brands"
      end
      # resource path
      local_var_path = "/brands"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(brand)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#add_brands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Deletes a single brand based on the ID supplied
    # @param id ID of brand to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_brand_by_id(id, opts = {})
      delete_brand_by_id_with_http_info(id, opts)
      return nil
    end

    # 
    # Deletes a single brand based on the ID supplied
    # @param id ID of brand to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_brand_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.delete_brand_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BrandsApi.delete_brand_by_id"
      end
      # resource path
      local_var_path = "/brands/{id}/".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#delete_brand_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a brand based on a single ID  ### Includes You can give the following values on includea parameter: `routes, products` 
    # @param id ID of brand to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :includes Include associated objects within response
    # @option opts [Integer] :limit max records to return
    # @return [InlineResponse201]
    def get_brand_by_id(id, opts = {})
      data, _status_code, _headers = get_brand_by_id_with_http_info(id, opts)
      return data
    end

    # 
    # Returns a brand based on a single ID  ### Includes You can give the following values on includea parameter: &#x60;routes, products&#x60; 
    # @param id ID of brand to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :includes Include associated objects within response
    # @option opts [Integer] :limit max records to return
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def get_brand_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.get_brand_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BrandsApi.get_brand_by_id"
      end
      # resource path
      local_var_path = "/brands/{id}/".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includes'] = @api_client.build_collection_param(opts[:'includes'], :csv) if !opts[:'includes'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#get_brand_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all brands from the system that the user has access to  ### Includes You can give the following values on includes parameter: `routes, products` 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :includes Include associated objects within response
    # @option opts [Integer] :limit max records to return
    # @option opts [Array<String>] :order_by Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60; 
    # @return [InlineResponse200]
    def get_brands(opts = {})
      data, _status_code, _headers = get_brands_with_http_info(opts)
      return data
    end

    # 
    # Returns all brands from the system that the user has access to  ### Includes You can give the following values on includes parameter: &#x60;routes, products&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :includes Include associated objects within response
    # @option opts [Integer] :limit max records to return
    # @option opts [Array<String>] :order_by Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60; 
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_brands_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.get_brands ..."
      end
      # resource path
      local_var_path = "/brands"

      # query parameters
      query_params = {}
      query_params[:'includes'] = @api_client.build_collection_param(opts[:'includes'], :csv) if !opts[:'includes'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order_by'] = @api_client.build_collection_param(opts[:'order_by'], :multi) if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#get_brands\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update a single brand based on the ID supplied
    # @param id ID of brand to update
    # @param brand Brand to update in store
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_category_by_id(id, brand, opts = {})
      update_category_by_id_with_http_info(id, brand, opts)
      return nil
    end

    # 
    # Update a single brand based on the ID supplied
    # @param id ID of brand to update
    # @param brand Brand to update in store
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_category_by_id_with_http_info(id, brand, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.update_category_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BrandsApi.update_category_by_id"
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling BrandsApi.update_category_by_id"
      end
      # resource path
      local_var_path = "/brands/{id}/".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(brand)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#update_category_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update a single brand based on the ID supplied
    # @param id ID of brand to update
    # @param brand Brand to update in store
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_category_by_id_0(id, brand, opts = {})
      update_category_by_id_0_with_http_info(id, brand, opts)
      return nil
    end

    # 
    # Update a single brand based on the ID supplied
    # @param id ID of brand to update
    # @param brand Brand to update in store
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_category_by_id_0_with_http_info(id, brand, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BrandsApi.update_category_by_id_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BrandsApi.update_category_by_id_0"
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling BrandsApi.update_category_by_id_0"
      end
      # resource path
      local_var_path = "/brands/{id}/".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(brand)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#update_category_by_id_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
